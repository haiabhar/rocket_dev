import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import React, { Component, PureComponent } from "react";
import { Utils } from "@react-awesome-query-builder/core";
import PropTypes from "prop-types";
import treeStoreReducer from "../stores/tree";
import context from "../stores/context";
import { createStore } from "redux";
import { Provider } from "react-redux";
import * as actions from "../actions";
import { createConfigMemo } from "../utils/configUtils";
import { immutableEqual } from "../utils/stuff";
import { createValidationMemo } from "../utils/validation";
import { liteShouldComponentUpdate, useOnPropsChanged } from "../utils/reactUtils";
import ConnectedQuery from "./Query";
var defaultRoot = Utils.DefaultUtils.defaultRoot;
var QueryContainer = /*#__PURE__*/function (_Component) {
  _inherits(QueryContainer, _Component);
  var _super = _createSuper(QueryContainer);
  function QueryContainer(props, context) {
    var _this;
    _classCallCheck(this, QueryContainer);
    _this = _super.call(this, props, context);
    _this.shouldComponentUpdate = liteShouldComponentUpdate(_assertThisInitialized(_this), {
      value: function value(nextValue, prevValue, state) {
        return false;
      }
    });
    useOnPropsChanged(_assertThisInitialized(_this));
    _this.getMemoizedConfig = createConfigMemo();
    _this.getMemoizedTree = createValidationMemo();
    var config = _this.getMemoizedConfig(props);
    var tree = props.value;
    var validatedTree = _this.getMemoizedTree(config, tree);
    var reducer = treeStoreReducer(config, validatedTree, _this.getMemoizedTree);
    var store = createStore(reducer);
    _this.state = {
      store: store,
      config: config
    };
    return _this;
  }
  _createClass(QueryContainer, [{
    key: "onPropsChanged",
    value: function onPropsChanged(nextProps) {
      var _this2 = this;
      // compare configs
      var oldConfig = this.state.config;
      var nextConfig = this.getMemoizedConfig(nextProps);
      var isConfigChanged = oldConfig !== nextConfig;

      // compare trees
      var storeValue = this.state.store.getState().tree;
      var isTreeChanged = !immutableEqual(nextProps.value, this.props.value) && !immutableEqual(nextProps.value, storeValue);
      var currentTree = isTreeChanged ? nextProps.value || defaultRoot(nextProps) : storeValue;
      if (isConfigChanged) {
        this.setState({
          config: nextConfig
        });
      }
      if (isTreeChanged || isConfigChanged) {
        var validatedTree = this.getMemoizedTree(nextConfig, currentTree, oldConfig);
        return Promise.resolve().then(function () {
          _this2.state.store.dispatch(actions.tree.setTree(nextConfig, validatedTree));
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      // `get_children` is deprecated!
      var _this$props = this.props,
        renderBuilder = _this$props.renderBuilder,
        get_children = _this$props.get_children,
        onChange = _this$props.onChange,
        settings = _this$props.settings;
      var _this$state = this.state,
        config = _this$state.config,
        store = _this$state.store;
      var QueryWrapper = settings.renderProvider;
      return /*#__PURE__*/React.createElement(QueryWrapper, {
        config: config
      }, /*#__PURE__*/React.createElement(Provider, {
        store: store,
        context: context
      }, /*#__PURE__*/React.createElement(ConnectedQuery, {
        config: config,
        getMemoizedTree: this.getMemoizedTree,
        onChange: onChange,
        renderBuilder: renderBuilder || get_children
      })));
    }
  }]);
  return QueryContainer;
}(Component);
QueryContainer.propTypes = {
  //config
  conjunctions: PropTypes.object.isRequired,
  fields: PropTypes.object.isRequired,
  types: PropTypes.object.isRequired,
  operators: PropTypes.object.isRequired,
  widgets: PropTypes.object.isRequired,
  settings: PropTypes.object.isRequired,
  onChange: PropTypes.func,
  renderBuilder: PropTypes.func,
  value: PropTypes.any //instanceOf(Immutable.Map)
};
export { QueryContainer as default };