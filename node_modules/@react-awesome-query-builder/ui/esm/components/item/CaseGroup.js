import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _get from "@babel/runtime/helpers/get";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import React from "react";
import PropTypes from "prop-types";
import GroupContainer from "../containers/GroupContainer";
import Draggable from "../containers/Draggable";
import { BasicGroup } from "./Group";
import { GroupActions } from "./GroupActions";
import { useOnPropsChanged } from "../../utils/reactUtils";
import { Col, dummyFn, ConfirmFn } from "../utils";
import Widget from "../rule/Widget";
import classNames from "classnames";
var CaseGroup = /*#__PURE__*/function (_BasicGroup) {
  _inherits(CaseGroup, _BasicGroup);
  var _super = _createSuper(CaseGroup);
  function CaseGroup(props) {
    var _this;
    _classCallCheck(this, CaseGroup);
    _this = _super.call(this, props);
    _this.childrenClassName = function () {
      return "case_group--children";
    };
    _this.renderFooterWrapper = function () {
      return null;
    };
    useOnPropsChanged(_assertThisInitialized(_this));
    _this.onPropsChanged(props);
    return _this;
  }
  _createClass(CaseGroup, [{
    key: "onPropsChanged",
    value: function onPropsChanged(nextProps) {}
  }, {
    key: "isDefaultCase",
    value: function isDefaultCase() {
      return this.props.children1 == undefined;
    }
  }, {
    key: "reordableNodesCnt",
    value: function reordableNodesCnt() {
      // `parentReordableNodesCnt` is number of cases to reorder
      return this.props.parentReordableNodesCnt;
    }
  }, {
    key: "reordableNodesCntForItem",
    value: function reordableNodesCntForItem(_item) {
      // `reordableNodesCnt` is number of nodes is current case
      if (this.props.isLocked) return 0;
      return this.props.reordableNodesCnt;
    }
  }, {
    key: "totalRulesCntForItem",
    value: function totalRulesCntForItem(_item) {
      // `totalRulesCnt` is number of nodes is current case
      return this.props.totalRulesCnt;
    }
  }, {
    key: "showDragIcon",
    value: function showDragIcon() {
      // default impl of `showDragIcon()` uses `this.reordableNodesCnt()`
      if (this.isDefaultCase()) return false;
      return _get(_getPrototypeOf(CaseGroup.prototype), "showDragIcon", this).call(this);
    }
  }, {
    key: "renderHeaderWrapper",
    value: function renderHeaderWrapper() {
      return /*#__PURE__*/React.createElement("div", {
        key: "group-header",
        className: classNames("group--header", this.isOneChild() ? "one--child" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : "", this.showDragIcon() ? "with--drag" : "hide--drag", this.showConjs() && (!this.isOneChild() || this.showNot()) ? "with--conjs" : "hide--conjs")
      }, this.renderHeaderLeft(), this.renderHeaderCenter(), this.renderActions());
    }
  }, {
    key: "renderChildrenWrapper",
    value: function renderChildrenWrapper() {
      if (this.isDefaultCase()) return null;
      // body has 2 columns: condition & value
      return /*#__PURE__*/React.createElement("div", {
        className: "case_group--body"
      }, this.renderCondition(), this.renderValue());
    }
  }, {
    key: "renderHeaderLeft",
    value: function renderHeaderLeft() {
      if (this.isDefaultCase()) {
        var defaultCaseLabel = this.props.config.settings.defaultCaseLabel;
        return defaultCaseLabel || "";
      }
      // default impl:
      return /*#__PURE__*/React.createElement("div", {
        className: "group--conjunctions"
      }, this.renderConjs(), this.renderDrag());
    }
  }, {
    key: "renderCondition",
    value: function renderCondition() {
      if (this.isDefaultCase()) return null;
      return _get(_getPrototypeOf(CaseGroup.prototype), "renderChildrenWrapper", this).call(this);
    }
  }, {
    key: "renderHeaderCenter",
    value: function renderHeaderCenter() {
      if (this.isDefaultCase()) return this.renderValue();else return null;
    }
  }, {
    key: "canAddGroup",
    value: function canAddGroup() {
      if (this.isDefaultCase()) return false;
      return _get(_getPrototypeOf(CaseGroup.prototype), "canAddGroup", this).call(this);
    }
  }, {
    key: "canAddRule",
    value: function canAddRule() {
      if (this.isDefaultCase()) return false;
      return _get(_getPrototypeOf(CaseGroup.prototype), "canAddRule", this).call(this);
    }
  }, {
    key: "renderValue",
    value: function renderValue() {
      var _this$props = this.props,
        config = _this$props.config,
        isLocked = _this$props.isLocked,
        value = _this$props.value,
        setValue = _this$props.setValue,
        id = _this$props.id;
      var immutableValuesMode = config.settings.immutableValuesMode;
      var widget = /*#__PURE__*/React.createElement(Widget, {
        key: "values",
        isCaseValue: true,
        field: "!case_value",
        operator: null,
        value: value,
        valueSrc: "value",
        valueError: null,
        config: config,
        setValue: !immutableValuesMode ? setValue : dummyFn,
        setValueSrc: dummyFn,
        readonly: immutableValuesMode || isLocked,
        id: id,
        groupId: null
      });
      return /*#__PURE__*/React.createElement(Col, {
        className: "case_group--value"
      }, widget);
    }
  }, {
    key: "renderActions",
    value: function renderActions() {
      var _this$props2 = this.props,
        config = _this$props2.config,
        addGroup = _this$props2.addGroup,
        addRule = _this$props2.addRule,
        isLocked = _this$props2.isLocked,
        isTrueLocked = _this$props2.isTrueLocked,
        id = _this$props2.id;
      return /*#__PURE__*/React.createElement(GroupActions, {
        config: config,
        addGroup: addGroup,
        addRule: addRule,
        canAddRule: this.canAddRule(),
        canAddGroup: this.canAddGroup(),
        canDeleteGroup: this.canDeleteGroup(),
        removeSelf: this.removeSelf,
        setLock: this.setLock,
        isLocked: isLocked,
        isTrueLocked: isTrueLocked,
        id: id
      });
    }
  }, {
    key: "isEmptyCurrentGroup",
    value: function isEmptyCurrentGroup() {
      // used to confirm self-deletion
      var value = this.props.value;
      var oneValue = value && value.size ? value.get(0) : null;
      var hasValue = oneValue != null && (Array.isArray(oneValue) ? oneValue.length > 0 : true);
      return _get(_getPrototypeOf(CaseGroup.prototype), "isEmptyCurrentGroup", this).call(this) && !hasValue;
    }
  }]);
  return CaseGroup;
}(BasicGroup);
CaseGroup.propTypes = _objectSpread(_objectSpread({}, BasicGroup.propTypes), {}, {
  parentReordableNodesCnt: PropTypes.number,
  value: PropTypes.any,
  setValue: PropTypes.func
});
export default GroupContainer(Draggable("group case_group")(ConfirmFn(CaseGroup)));