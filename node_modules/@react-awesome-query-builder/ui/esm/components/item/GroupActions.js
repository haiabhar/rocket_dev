import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import React, { PureComponent } from "react";
var groupActionsPositionList = {
  topLeft: "group--actions--tl",
  topCenter: "group--actions--tc",
  topRight: "group--actions--tr",
  bottomLeft: "group--actions--bl",
  bottomCenter: "group--actions--bc",
  bottomRight: "group--actions--br"
};
var defaultPosition = "topRight";
export var GroupActions = /*#__PURE__*/function (_PureComponent) {
  _inherits(GroupActions, _PureComponent);
  var _super = _createSuper(GroupActions);
  function GroupActions() {
    _classCallCheck(this, GroupActions);
    return _super.apply(this, arguments);
  }
  _createClass(GroupActions, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        config = _this$props.config,
        addRule = _this$props.addRule,
        addGroup = _this$props.addGroup,
        removeSelf = _this$props.removeSelf,
        setLock = _this$props.setLock,
        isLocked = _this$props.isLocked,
        isTrueLocked = _this$props.isTrueLocked,
        id = _this$props.id,
        canAddGroup = _this$props.canAddGroup,
        canAddRule = _this$props.canAddRule,
        canDeleteGroup = _this$props.canDeleteGroup;
      var _config$settings = config.settings,
        immutableGroupsMode = _config$settings.immutableGroupsMode,
        addRuleLabel = _config$settings.addRuleLabel,
        addGroupLabel = _config$settings.addGroupLabel,
        delGroupLabel = _config$settings.delGroupLabel,
        groupActionsPosition = _config$settings.groupActionsPosition,
        Btn = _config$settings.renderButton,
        Switch = _config$settings.renderSwitch,
        BtnGrp = _config$settings.renderButtonGroup,
        lockLabel = _config$settings.lockLabel,
        lockedLabel = _config$settings.lockedLabel,
        showLock = _config$settings.showLock,
        canDeleteLocked = _config$settings.canDeleteLocked;
      var position = groupActionsPositionList[groupActionsPosition || defaultPosition];
      var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /*#__PURE__*/React.createElement(Switch, {
        type: "lock",
        id: id,
        value: isLocked,
        setValue: setLock,
        label: lockLabel,
        checkedLabel: lockedLabel,
        config: config
      });
      var addRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /*#__PURE__*/React.createElement(Btn, {
        type: "addRule",
        onClick: addRule,
        label: addRuleLabel,
        readonly: isLocked,
        config: config
      });
      var addGroupBtn = !immutableGroupsMode && canAddGroup && !isLocked && /*#__PURE__*/React.createElement(Btn, {
        type: "addGroup",
        onClick: addGroup,
        label: addGroupLabel,
        readonly: isLocked,
        config: config
      });
      var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /*#__PURE__*/React.createElement(Btn, {
        type: "delGroup",
        onClick: removeSelf,
        label: delGroupLabel,
        config: config
      });
      return /*#__PURE__*/React.createElement("div", {
        className: "group--actions ".concat(position)
      }, /*#__PURE__*/React.createElement(BtnGrp, {
        config: config
      }, setLockSwitch, addRuleBtn, addGroupBtn, delGroupBtn));
    }
  }]);
  return GroupActions;
}(PureComponent);