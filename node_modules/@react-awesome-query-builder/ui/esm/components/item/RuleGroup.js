import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _get from "@babel/runtime/helpers/get";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import React from "react";
import PropTypes from "prop-types";
import GroupContainer from "../containers/GroupContainer";
import Draggable from "../containers/Draggable";
import { BasicGroup } from "./Group";
import { RuleGroupActions } from "./RuleGroupActions";
import FieldWrapper from "../rule/FieldWrapper";
import { useOnPropsChanged } from "../../utils/reactUtils";
import { ConfirmFn } from "../utils";
var RuleGroup = /*#__PURE__*/function (_BasicGroup) {
  _inherits(RuleGroup, _BasicGroup);
  var _super = _createSuper(RuleGroup);
  function RuleGroup(props) {
    var _this;
    _classCallCheck(this, RuleGroup);
    _this = _super.call(this, props);
    _this.childrenClassName = function () {
      return "rule_group--children";
    };
    _this.renderHeaderWrapper = function () {
      return null;
    };
    _this.renderFooterWrapper = function () {
      return null;
    };
    _this.renderConjs = function () {
      return null;
    };
    _this.canAddGroup = function () {
      return false;
    };
    _this.canAddRule = function () {
      return true;
    };
    _this.canDeleteGroup = function () {
      return false;
    };
    useOnPropsChanged(_assertThisInitialized(_this));
    _this.onPropsChanged(props);
    return _this;
  }
  _createClass(RuleGroup, [{
    key: "onPropsChanged",
    value: function onPropsChanged(nextProps) {}
  }, {
    key: "reordableNodesCntForItem",
    value: function reordableNodesCntForItem(_item) {
      if (this.props.isLocked) return 0;
      var children1 = this.props.children1;
      return (children1 === null || children1 === void 0 ? void 0 : children1.size) || 0;
    }
  }, {
    key: "renderChildrenWrapper",
    value: function renderChildrenWrapper() {
      return /*#__PURE__*/React.createElement(React.Fragment, null, this.renderDrag(), this.renderField(), this.renderActions(), _get(_getPrototypeOf(RuleGroup.prototype), "renderChildrenWrapper", this).call(this));
    }
  }, {
    key: "renderField",
    value: function renderField() {
      var _this$props = this.props,
        config = _this$props.config,
        selectedField = _this$props.selectedField,
        setField = _this$props.setField,
        parentField = _this$props.parentField,
        id = _this$props.id,
        groupId = _this$props.groupId,
        isLocked = _this$props.isLocked;
      var immutableFieldsMode = config.settings.immutableFieldsMode;
      return /*#__PURE__*/React.createElement(FieldWrapper, {
        key: "field",
        classname: "group--field",
        config: config,
        selectedField: selectedField,
        setField: setField,
        parentField: parentField,
        readonly: immutableFieldsMode || isLocked,
        id: id,
        groupId: groupId
      });
    }
  }, {
    key: "renderActions",
    value: function renderActions() {
      var _this$props2 = this.props,
        config = _this$props2.config,
        addRule = _this$props2.addRule,
        isLocked = _this$props2.isLocked,
        isTrueLocked = _this$props2.isTrueLocked,
        id = _this$props2.id;
      return /*#__PURE__*/React.createElement(RuleGroupActions, {
        config: config,
        addRule: addRule,
        canAddRule: this.canAddRule(),
        canDeleteGroup: this.canDeleteGroup(),
        removeSelf: this.removeSelf,
        setLock: this.setLock,
        isLocked: isLocked,
        isTrueLocked: isTrueLocked,
        id: id
      });
    }
  }, {
    key: "extraPropsForItem",
    value: function extraPropsForItem(_item) {
      return {
        parentField: this.props.selectedField
      };
    }
  }]);
  return RuleGroup;
}(BasicGroup);
RuleGroup.propTypes = _objectSpread(_objectSpread({}, BasicGroup.propTypes), {}, {
  selectedField: PropTypes.string,
  parentField: PropTypes.string,
  setField: PropTypes.func
});
export default GroupContainer(Draggable("group rule_group")(ConfirmFn(RuleGroup)));