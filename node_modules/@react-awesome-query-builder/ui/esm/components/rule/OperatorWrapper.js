import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import React, { PureComponent } from "react";
import Operator from "./Operator";
import { Col } from "../utils";
var OperatorWrapper = /*#__PURE__*/function (_PureComponent) {
  _inherits(OperatorWrapper, _PureComponent);
  var _super = _createSuper(OperatorWrapper);
  function OperatorWrapper() {
    _classCallCheck(this, OperatorWrapper);
    return _super.apply(this, arguments);
  }
  _createClass(OperatorWrapper, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        config = _this$props.config,
        selectedField = _this$props.selectedField,
        selectedOperator = _this$props.selectedOperator,
        setOperator = _this$props.setOperator,
        selectedFieldPartsLabels = _this$props.selectedFieldPartsLabels,
        showOperator = _this$props.showOperator,
        showOperatorLabel = _this$props.showOperatorLabel,
        selectedFieldWidgetConfig = _this$props.selectedFieldWidgetConfig,
        readonly = _this$props.readonly,
        id = _this$props.id,
        groupId = _this$props.groupId;
      var operator = showOperator && /*#__PURE__*/React.createElement(Col, {
        key: "operators-for-" + (selectedFieldPartsLabels || []).join("_"),
        className: "rule--operator"
      }, config.settings.showLabels && /*#__PURE__*/React.createElement("label", {
        className: "rule--label"
      }, config.settings.operatorLabel), /*#__PURE__*/React.createElement(Operator, {
        key: "operator",
        config: config,
        selectedField: selectedField,
        selectedOperator: selectedOperator,
        setOperator: setOperator,
        readonly: readonly,
        id: id,
        groupId: groupId
      }));
      var hiddenOperator = showOperatorLabel && /*#__PURE__*/React.createElement(Col, {
        key: "operators-for-" + (selectedFieldPartsLabels || []).join("_"),
        className: "rule--operator"
      }, /*#__PURE__*/React.createElement("div", {
        className: "rule--operator-wrapper"
      }, config.settings.showLabels ? /*#__PURE__*/React.createElement("label", {
        className: "rule--label"
      }, "\xA0") : null, /*#__PURE__*/React.createElement("div", {
        className: "rule--operator-text-wrapper"
      }, /*#__PURE__*/React.createElement("span", {
        className: "rule--operator-text"
      }, selectedFieldWidgetConfig.operatorInlineLabel))));
      return [operator, hiddenOperator];
    }
  }]);
  return OperatorWrapper;
}(PureComponent);
export { OperatorWrapper as default };