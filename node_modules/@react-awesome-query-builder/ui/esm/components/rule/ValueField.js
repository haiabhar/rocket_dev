import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import React, { PureComponent } from "react";
import { Utils } from "@react-awesome-query-builder/core";
import PropTypes from "prop-types";
import { truncateString } from "../../utils/stuff";
import { useOnPropsChanged } from "../../utils/reactUtils";
import last from "lodash/last";
import keys from "lodash/keys";
var clone = Utils.clone;
var getFieldConfig = Utils.ConfigUtils.getFieldConfig;
var _Utils$RuleUtils = Utils.RuleUtils,
  getFieldPath = _Utils$RuleUtils.getFieldPath,
  getFieldPathLabels = _Utils$RuleUtils.getFieldPathLabels,
  getWidgetForFieldOp = _Utils$RuleUtils.getWidgetForFieldOp;

//tip: this.props.value - right value, this.props.field - left value
var ValueField = /*#__PURE__*/function (_PureComponent) {
  _inherits(ValueField, _PureComponent);
  var _super = _createSuper(ValueField);
  function ValueField(props) {
    var _this;
    _classCallCheck(this, ValueField);
    _this = _super.call(this, props);
    useOnPropsChanged(_assertThisInitialized(_this));
    _this.onPropsChanged(props);
    return _this;
  }
  _createClass(ValueField, [{
    key: "onPropsChanged",
    value: function onPropsChanged(nextProps) {
      var prevProps = this.props;
      var keysForItems = ["config", "field", "operator", "isFuncArg", "parentField"];
      var keysForMeta = ["config", "field", "operator", "value", "placeholder", "isFuncArg", "parentField"];
      var needUpdateItems = !this.items || keysForItems.map(function (k) {
        return nextProps[k] !== prevProps[k];
      }).filter(function (ch) {
        return ch;
      }).length > 0;
      var needUpdateMeta = !this.meta || keysForMeta.map(function (k) {
        return nextProps[k] !== prevProps[k];
      }).filter(function (ch) {
        return ch;
      }).length > 0;
      if (needUpdateItems) {
        this.items = this.getItems(nextProps);
      }
      if (needUpdateMeta) {
        this.meta = this.getMeta(nextProps);
      }
    }
  }, {
    key: "getItems",
    value: function getItems(_ref) {
      var config = _ref.config,
        field = _ref.field,
        operator = _ref.operator,
        parentField = _ref.parentField,
        isFuncArg = _ref.isFuncArg,
        fieldDefinition = _ref.fieldDefinition;
      var canCompareFieldWithField = config.settings.canCompareFieldWithField;
      var fieldSeparator = config.settings.fieldSeparator;
      var parentFieldPath = typeof parentField == "string" ? parentField.split(fieldSeparator) : parentField;
      var parentFieldConfig = parentField ? getFieldConfig(config, parentField) : null;
      var sourceFields = parentField ? parentFieldConfig && parentFieldConfig.subfields : config.fields;
      var filteredFields = this.filterFields(config, sourceFields, field, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition);
      var items = this.buildOptions(parentFieldPath, config, filteredFields, parentFieldPath);
      return items;
    }
  }, {
    key: "getMeta",
    value: function getMeta(_ref2) {
      var config = _ref2.config,
        field = _ref2.field,
        operator = _ref2.operator,
        value = _ref2.value,
        customPlaceholder = _ref2.placeholder,
        isFuncArg = _ref2.isFuncArg,
        parentField = _ref2.parentField;
      var _config$settings = config.settings,
        fieldPlaceholder = _config$settings.fieldPlaceholder,
        fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;
      var selectedKey = value;
      var isFieldSelected = !!value;
      var leftFieldConfig = getFieldConfig(config, field);
      var leftFieldWidgetField = leftFieldConfig.widgets.field;
      var leftFieldWidgetFieldProps = leftFieldWidgetField && leftFieldWidgetField.widgetProps || {};
      var placeholder = isFieldSelected ? null : isFuncArg && customPlaceholder || leftFieldWidgetFieldProps.valuePlaceholder || fieldPlaceholder;
      var currField = isFieldSelected ? getFieldConfig(config, selectedKey) : null;
      var selectedOpts = currField || {};
      var selectedKeys = getFieldPath(selectedKey, config);
      var selectedPath = getFieldPath(selectedKey, config, true);
      var selectedLabel = this.getFieldLabel(currField, selectedKey, config);
      var partsLabels = getFieldPathLabels(selectedKey, config);
      var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
      if (selectedFullLabel == selectedLabel || parentField) selectedFullLabel = null;
      var selectedAltLabel = selectedOpts.label2;
      return {
        placeholder: placeholder,
        selectedKey: selectedKey,
        selectedKeys: selectedKeys,
        selectedPath: selectedPath,
        selectedLabel: selectedLabel,
        selectedOpts: selectedOpts,
        selectedAltLabel: selectedAltLabel,
        selectedFullLabel: selectedFullLabel
      };
    }
  }, {
    key: "filterFields",
    value: function filterFields(config, fields, leftFieldFullkey, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition) {
      fields = clone(fields);
      var fieldSeparator = config.settings.fieldSeparator;
      var leftFieldConfig = getFieldConfig(config, leftFieldFullkey);
      var _relyOnWidgetType = false; //TODO: remove this, see issue #758
      var widget = getWidgetForFieldOp(config, leftFieldFullkey, operator, "value");
      var widgetConfig = config.widgets[widget];
      var expectedType;
      if (isFuncArg && fieldDefinition) {
        expectedType = fieldDefinition.type;
      } else if (_relyOnWidgetType && widgetConfig) {
        expectedType = widgetConfig.type;
      } else {
        expectedType = leftFieldConfig.type;
      }
      function _filter(list, path) {
        for (var rightFieldKey in list) {
          var subfields = list[rightFieldKey].subfields;
          var subpath = (path ? path : []).concat(rightFieldKey);
          var rightFieldFullkey = subpath.join(fieldSeparator);
          var rightFieldConfig = getFieldConfig(config, rightFieldFullkey);
          if (!rightFieldConfig) {
            delete list[rightFieldKey];
          } else if (rightFieldConfig.type == "!struct" || rightFieldConfig.type == "!group") {
            if (_filter(subfields, subpath) == 0) delete list[rightFieldKey];
          } else {
            // tip: LHS field can be used as arg in RHS function
            var canUse = rightFieldConfig.type == expectedType && (isFuncArg ? true : rightFieldFullkey != leftFieldFullkey);
            var fn = canCompareFieldWithField || config.settings.canCompareFieldWithField;
            if (fn) canUse = canUse && fn(leftFieldFullkey, leftFieldConfig, rightFieldFullkey, rightFieldConfig, operator);
            if (!canUse) delete list[rightFieldKey];
          }
        }
        return keys(list).length;
      }
      _filter(fields, parentFieldPath || []);
      return fields;
    }
  }, {
    key: "buildOptions",
    value: function buildOptions(parentFieldPath, config, fields) {
      var _this2 = this;
      var path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var optGroupLabel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      if (!fields) return null;
      var _config$settings2 = config.settings,
        fieldSeparator = _config$settings2.fieldSeparator,
        fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
      var prefix = path ? path.join(fieldSeparator) + fieldSeparator : "";
      return keys(fields).map(function (fieldKey) {
        var field = fields[fieldKey];
        var label = _this2.getFieldLabel(field, fieldKey, config);
        var partsLabels = getFieldPathLabels(fieldKey, config);
        var fullLabel = partsLabels.join(fieldSeparatorDisplay);
        if (fullLabel == label || parentFieldPath) fullLabel = null;
        var altLabel = field.label2;
        var tooltip = field.tooltip;
        var subpath = (path ? path : []).concat(fieldKey);
        if (field.hideForCompare) return undefined;
        if (field.type == "!struct" || field.type == "!group") {
          return {
            key: fieldKey,
            path: prefix + fieldKey,
            label: label,
            fullLabel: fullLabel,
            altLabel: altLabel,
            tooltip: tooltip,
            items: _this2.buildOptions(parentFieldPath, config, field.subfields, subpath, label)
          };
        } else {
          return {
            key: fieldKey,
            path: prefix + fieldKey,
            label: label,
            fullLabel: fullLabel,
            altLabel: altLabel,
            tooltip: tooltip,
            grouplabel: optGroupLabel
          };
        }
      }).filter(function (o) {
        return !!o;
      });
    }
  }, {
    key: "getFieldLabel",
    value: function getFieldLabel(fieldOpts, fieldKey, config) {
      if (!fieldKey) return null;
      var fieldSeparator = config.settings.fieldSeparator;
      var maxLabelsLength = config.settings.maxLabelsLength;
      var fieldParts = Array.isArray(fieldKey) ? fieldKey : fieldKey.split(fieldSeparator);
      var label = fieldOpts.label || last(fieldParts);
      label = truncateString(label, maxLabelsLength);
      return label;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        config = _this$props.config,
        customProps = _this$props.customProps,
        setValue = _this$props.setValue,
        readonly = _this$props.readonly,
        id = _this$props.id,
        groupId = _this$props.groupId;
      var renderField = config.settings.renderField;
      var renderProps = _objectSpread({
        config: config,
        customProps: customProps,
        setField: setValue,
        readonly: readonly,
        items: this.items,
        id: id,
        groupId: groupId
      }, this.meta);
      return renderField(renderProps);
    }
  }]);
  return ValueField;
}(PureComponent);
ValueField.propTypes = {
  id: PropTypes.string,
  groupId: PropTypes.string,
  setValue: PropTypes.func.isRequired,
  config: PropTypes.object.isRequired,
  field: PropTypes.string.isRequired,
  value: PropTypes.string,
  operator: PropTypes.string,
  customProps: PropTypes.object,
  readonly: PropTypes.bool,
  parentField: PropTypes.string,
  fieldDefinition: PropTypes.object,
  isFuncArg: PropTypes.bool
};
export { ValueField as default };