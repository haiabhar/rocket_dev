import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import React, { PureComponent } from "react";
import Field from "./Field";
import { Col } from "../utils";
var FieldWrapper = /*#__PURE__*/function (_PureComponent) {
  _inherits(FieldWrapper, _PureComponent);
  var _super = _createSuper(FieldWrapper);
  function FieldWrapper() {
    _classCallCheck(this, FieldWrapper);
    return _super.apply(this, arguments);
  }
  _createClass(FieldWrapper, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        config = _this$props.config,
        selectedField = _this$props.selectedField,
        setField = _this$props.setField,
        parentField = _this$props.parentField,
        classname = _this$props.classname,
        readonly = _this$props.readonly,
        id = _this$props.id,
        groupId = _this$props.groupId;
      return /*#__PURE__*/React.createElement(Col, {
        className: classname
      }, config.settings.showLabels && /*#__PURE__*/React.createElement("label", {
        className: "rule--label"
      }, config.settings.fieldLabel), /*#__PURE__*/React.createElement(Field, {
        config: config,
        selectedField: selectedField,
        parentField: parentField,
        setField: setField,
        customProps: config.settings.customFieldSelectProps,
        readonly: readonly,
        id: id,
        groupId: groupId
      }));
    }
  }]);
  return FieldWrapper;
}(PureComponent);
export { FieldWrapper as default };