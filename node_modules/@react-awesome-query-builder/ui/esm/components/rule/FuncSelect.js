import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import React, { PureComponent } from "react";
import { Utils } from "@react-awesome-query-builder/core";
import PropTypes from "prop-types";
import { truncateString } from "../../utils/stuff";
import { useOnPropsChanged } from "../../utils/reactUtils";
import last from "lodash/last";
import keys from "lodash/keys";
var clone = Utils.clone;
var _Utils$ConfigUtils = Utils.ConfigUtils,
  getFieldConfig = _Utils$ConfigUtils.getFieldConfig,
  getFuncConfig = _Utils$ConfigUtils.getFuncConfig;
var _Utils$RuleUtils = Utils.RuleUtils,
  getFieldPath = _Utils$RuleUtils.getFieldPath,
  getFuncPathLabels = _Utils$RuleUtils.getFuncPathLabels,
  getWidgetForFieldOp = _Utils$RuleUtils.getWidgetForFieldOp;

//tip: this.props.value - right value, this.props.field - left value
var FuncSelect = /*#__PURE__*/function (_PureComponent) {
  _inherits(FuncSelect, _PureComponent);
  var _super = _createSuper(FuncSelect);
  function FuncSelect(props) {
    var _this;
    _classCallCheck(this, FuncSelect);
    _this = _super.call(this, props);
    useOnPropsChanged(_assertThisInitialized(_this));
    _this.onPropsChanged(props);
    return _this;
  }
  _createClass(FuncSelect, [{
    key: "onPropsChanged",
    value: function onPropsChanged(nextProps) {
      var prevProps = this.props;
      var keysForItems = ["config", "field", "operator", "isFuncArg"];
      var keysForMeta = ["config", "field", "value"];
      var needUpdateItems = !this.items || keysForItems.map(function (k) {
        return nextProps[k] !== prevProps[k];
      }).filter(function (ch) {
        return ch;
      }).length > 0;
      var needUpdateMeta = !this.meta || keysForMeta.map(function (k) {
        return nextProps[k] !== prevProps[k];
      }).filter(function (ch) {
        return ch;
      }).length > 0;
      if (needUpdateMeta) {
        this.meta = this.getMeta(nextProps);
      }
      if (needUpdateItems) {
        this.items = this.getItems(nextProps);
      }
    }
  }, {
    key: "getItems",
    value: function getItems(_ref) {
      var config = _ref.config,
        field = _ref.field,
        operator = _ref.operator,
        parentFuncs = _ref.parentFuncs,
        fieldDefinition = _ref.fieldDefinition,
        isFuncArg = _ref.isFuncArg;
      var canUseFuncForField = config.settings.canUseFuncForField;
      var filteredFuncs = this.filterFuncs(config, config.funcs, field, operator, canUseFuncForField, parentFuncs, isFuncArg, fieldDefinition);
      var items = this.buildOptions(config, filteredFuncs);
      return items;
    }
  }, {
    key: "getMeta",
    value: function getMeta(_ref2) {
      var config = _ref2.config,
        field = _ref2.field,
        value = _ref2.value;
      var _config$settings = config.settings,
        funcPlaceholder = _config$settings.funcPlaceholder,
        fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;
      var selectedFuncKey = value;
      var isFuncSelected = !!value;
      var leftFieldConfig = getFieldConfig(config, field);
      var leftFieldWidgetField = leftFieldConfig.widgets.field;
      var leftFieldWidgetFieldProps = leftFieldWidgetField && leftFieldWidgetField.widgetProps || {};
      var placeholder = !isFuncSelected ? funcPlaceholder : null;
      var currFunc = isFuncSelected ? getFuncConfig(config, selectedFuncKey) : null;
      var selectedOpts = currFunc || {};
      var selectedKeys = getFieldPath(selectedFuncKey, config);
      var selectedPath = getFieldPath(selectedFuncKey, config, true);
      var selectedLabel = this.getFuncLabel(currFunc, selectedFuncKey, config);
      var partsLabels = getFuncPathLabels(selectedFuncKey, config);
      var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
      if (selectedFullLabel == selectedLabel) selectedFullLabel = null;
      return {
        placeholder: placeholder,
        selectedKey: selectedFuncKey,
        selectedKeys: selectedKeys,
        selectedPath: selectedPath,
        selectedLabel: selectedLabel,
        selectedOpts: selectedOpts,
        selectedFullLabel: selectedFullLabel
      };
    }
  }, {
    key: "filterFuncs",
    value: function filterFuncs(config, funcs, leftFieldFullkey, operator, canUseFuncForField, parentFuncs, isFuncArg, fieldDefinition) {
      funcs = clone(funcs);
      var fieldSeparator = config.settings.fieldSeparator;
      var leftFieldConfig = getFieldConfig(config, leftFieldFullkey);
      var expectedType;
      var targetDefinition = leftFieldConfig;
      var widget = getWidgetForFieldOp(config, leftFieldFullkey, operator, "value");
      if (isFuncArg && fieldDefinition) {
        targetDefinition = fieldDefinition;
        expectedType = fieldDefinition.type;
      } else if (widget) {
        var widgetConfig = config.widgets[widget];
        var widgetType = widgetConfig.type;
        //expectedType = leftFieldConfig.type;
        expectedType = widgetType;
      } else {
        expectedType = leftFieldConfig.type;
      }
      function _filter(list, path) {
        for (var funcKey in list) {
          var subfields = list[funcKey].subfields;
          var subpath = (path ? path : []).concat(funcKey);
          var funcFullkey = subpath.join(fieldSeparator);
          var funcConfig = getFuncConfig(config, funcFullkey);
          if (funcConfig.type == "!struct") {
            if (_filter(subfields, subpath) == 0) delete list[funcKey];
          } else {
            var canUse = funcConfig.returnType == expectedType;
            if (targetDefinition.funcs) canUse = canUse && targetDefinition.funcs.includes(funcFullkey);
            if (canUseFuncForField) canUse = canUse && canUseFuncForField(leftFieldFullkey, leftFieldConfig, funcFullkey, funcConfig, operator);
            // don't use func in func (can be configurable, but usually users don't need this)
            if (!funcConfig.allowSelfNesting && parentFuncs && parentFuncs.map(function (_ref3) {
              var _ref4 = _slicedToArray(_ref3, 2),
                func = _ref4[0],
                _arg = _ref4[1];
              return func;
            }).includes(funcFullkey)) canUse = false;
            if (!canUse) delete list[funcKey];
          }
        }
        return keys(list).length;
      }
      _filter(funcs, []);
      return funcs;
    }
  }, {
    key: "buildOptions",
    value: function buildOptions(config, funcs) {
      var _this2 = this;
      var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var optGroupLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      if (!funcs) return null;
      var _config$settings2 = config.settings,
        fieldSeparator = _config$settings2.fieldSeparator,
        fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
      var prefix = path ? path.join(fieldSeparator) + fieldSeparator : "";
      return keys(funcs).map(function (funcKey) {
        var func = funcs[funcKey];
        var label = _this2.getFuncLabel(func, funcKey, config);
        var partsLabels = getFuncPathLabels(funcKey, config);
        var fullLabel = partsLabels.join(fieldSeparatorDisplay);
        if (fullLabel == label) fullLabel = null;
        var tooltip = func.tooltip;
        var subpath = (path ? path : []).concat(funcKey);
        if (func.type == "!struct") {
          return {
            key: funcKey,
            path: prefix + funcKey,
            label: label,
            fullLabel: fullLabel,
            tooltip: tooltip,
            items: _this2.buildOptions(config, func.subfields, subpath, label)
          };
        } else {
          return {
            key: funcKey,
            path: prefix + funcKey,
            label: label,
            fullLabel: fullLabel,
            tooltip: tooltip,
            grouplabel: optGroupLabel
          };
        }
      });
    }
  }, {
    key: "getFuncLabel",
    value: function getFuncLabel(funcOpts, funcKey, config) {
      if (!funcKey) return null;
      var fieldSeparator = config.settings.fieldSeparator;
      var maxLabelsLength = config.settings.maxLabelsLength;
      var funcParts = Array.isArray(funcKey) ? funcKey : funcKey.split(fieldSeparator);
      var label = funcOpts.label || last(funcParts);
      label = truncateString(label, maxLabelsLength);
      return label;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        config = _this$props.config,
        customProps = _this$props.customProps,
        setValue = _this$props.setValue,
        readonly = _this$props.readonly,
        id = _this$props.id,
        groupId = _this$props.groupId;
      var renderFunc = config.settings.renderFunc;
      var renderProps = _objectSpread({
        config: config,
        customProps: customProps,
        readonly: readonly,
        setField: setValue,
        items: this.items,
        id: id,
        groupId: groupId
      }, this.meta);
      return renderFunc(renderProps);
    }
  }]);
  return FuncSelect;
}(PureComponent);
FuncSelect.propTypes = {
  id: PropTypes.string,
  groupId: PropTypes.string,
  config: PropTypes.object.isRequired,
  field: PropTypes.string.isRequired,
  operator: PropTypes.string,
  customProps: PropTypes.object,
  value: PropTypes.string,
  setValue: PropTypes.func.isRequired,
  readonly: PropTypes.bool,
  parentFuncs: PropTypes.array,
  fieldDefinition: PropTypes.object,
  isFuncArg: PropTypes.bool
};
export { FuncSelect as default };