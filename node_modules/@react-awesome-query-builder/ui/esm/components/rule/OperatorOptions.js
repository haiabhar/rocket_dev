import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
var _excluded = ["factory"];
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import React, { PureComponent } from "react";
import { Utils } from "@react-awesome-query-builder/core";
import PropTypes from "prop-types";
var getOperatorConfig = Utils.ConfigUtils.getOperatorConfig;
var OperatorOptions = /*#__PURE__*/function (_PureComponent) {
  _inherits(OperatorOptions, _PureComponent);
  var _super = _createSuper(OperatorOptions);
  function OperatorOptions() {
    _classCallCheck(this, OperatorOptions);
    return _super.apply(this, arguments);
  }
  _createClass(OperatorOptions, [{
    key: "render",
    value: function render() {
      if (!this.props.selectedOperator) return null;
      var operatorDefinitions = getOperatorConfig(this.props.config, this.props.selectedOperator, this.props.selectedField);
      if (typeof operatorDefinitions.options === "undefined") {
        return null;
      }
      var _operatorDefinitions$ = operatorDefinitions.options,
        optionsFactory = _operatorDefinitions$.factory,
        basicOptionsProps = _objectWithoutProperties(_operatorDefinitions$, _excluded);
      var optionsProps = Object.assign({}, basicOptionsProps, {
        config: this.props.config,
        field: this.props.selectedField,
        operator: this.props.selectedOperator,
        options: this.props.operatorOptions,
        setOption: this.props.setOperatorOption,
        readonly: this.props.readonly
      });
      var optionsCmp = optionsFactory(optionsProps);
      var name = this.props.selectedOperator;
      return /*#__PURE__*/React.createElement("div", {
        className: "rule--operator rule--operator--".concat(name.toUpperCase())
      }, optionsCmp);
    }
  }]);
  return OperatorOptions;
}(PureComponent);
OperatorOptions.propTypes = {
  config: PropTypes.object.isRequired,
  operatorOptions: PropTypes.any.isRequired,
  //instanceOf(Immutable.Map)
  selectedField: PropTypes.string.isRequired,
  selectedOperator: PropTypes.string.isRequired,
  readonly: PropTypes.bool,
  //actions
  setOperatorOption: PropTypes.func.isRequired
};
export { OperatorOptions as default };