import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { Utils } from "@react-awesome-query-builder/core";
import React, { Component } from "react";
import PropTypes from "prop-types";
import { Item } from "./item/Item";
import SortableContainer from "./containers/SortableContainer";
import { pureShouldComponentUpdate } from "../utils/reactUtils";
var _Utils$TreeUtils = Utils.TreeUtils,
  getTotalReordableNodesCountInTree = _Utils$TreeUtils.getTotalReordableNodesCountInTree,
  getTotalRulesCountInTree = _Utils$TreeUtils.getTotalRulesCountInTree;
var _Utils$DefaultUtils = Utils.DefaultUtils,
  createListFromArray = _Utils$DefaultUtils.createListFromArray,
  emptyProperies = _Utils$DefaultUtils.emptyProperies;
var Builder = /*#__PURE__*/function (_Component) {
  _inherits(Builder, _Component);
  var _super = _createSuper(Builder);
  function Builder(props) {
    var _this;
    _classCallCheck(this, Builder);
    _this = _super.call(this, props);
    _this._updPath(props);
    return _this;
  }
  _createClass(Builder, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      var prevProps = this.props;
      var should = pureShouldComponentUpdate(this)(nextProps, nextState);
      if (should) {
        var chs = [];
        for (var k in nextProps) {
          var changed = nextProps[k] !== prevProps[k];
          if (changed && k != "__isInternalValueChange") {
            chs.push(k);
          }
        }
        if (!chs.length) should = false;
        //optimize render
        if (chs.length == 1 && chs[0] == "tree" && nextProps.__isInternalValueChange) should = false;
      }
      return should;
    }
  }, {
    key: "_updPath",
    value: function _updPath(props) {
      var id = props.tree.get("id");
      this.path = createListFromArray([id]);
    }
  }, {
    key: "render",
    value: function render() {
      var tree = this.props.tree;
      var rootType = tree.get("type");
      var isTernary = rootType == "switch_group";
      var reordableNodesCnt = isTernary ? null : getTotalReordableNodesCountInTree(tree);
      var totalRulesCnt = isTernary ? null : getTotalRulesCountInTree(tree);
      var id = tree.get("id");
      return /*#__PURE__*/React.createElement(Item, {
        key: id,
        id: id,
        path: this.path,
        type: rootType,
        properties: tree.get("properties") || emptyProperies(),
        config: this.props.config,
        actions: this.props.actions,
        children1: tree.get("children1") || emptyProperies()
        //tree={tree}
        ,
        reordableNodesCnt: reordableNodesCnt,
        totalRulesCnt: totalRulesCnt,
        parentReordableNodesCnt: 0,
        onDragStart: this.props.onDragStart
      });
    }
  }]);
  return Builder;
}(Component);
Builder.propTypes = {
  tree: PropTypes.any.isRequired,
  //instanceOf(Immutable.Map)
  config: PropTypes.object.isRequired,
  actions: PropTypes.object.isRequired,
  onDragStart: PropTypes.func
};
export default SortableContainer(Builder);