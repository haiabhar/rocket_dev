import _typeof from "@babel/runtime/helpers/typeof";
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import pick from "lodash/pick";
import { Utils } from "@react-awesome-query-builder/core";
var extendConfig = Utils.ConfigUtils.extendConfig;
var configKeys = ["conjunctions", "fields", "types", "operators", "widgets", "settings", "funcs"];
var pickConfig = function pickConfig(props) {
  return pick(props, configKeys);
};
export var createConfigMemo = function createConfigMemo() {
  var configStore = new Map();
  var maxSize = 2; // current and prev
  var configId = 0;
  var extendAndStore = function extendAndStore(config) {
    var extendedConfig = extendConfig(config, ++configId);
    if (configStore.size + 1 > maxSize) {
      configStore["delete"](configStore.keys()[0]);
    }
    configStore.set(config, extendedConfig);
    return extendedConfig;
  };
  var findExtended = function findExtended(findConfig) {
    // strict find:
    // return configStore.get(findConfig) || configStore.values().find(ec => ec === findConfig);
    var _iterator = _createForOfIteratorHelper(configStore.keys()),
      _step;
    try {
      var _loop = function _loop() {
        var savedConfig = _step.value;
        var found = configKeys.map(function (k) {
          return savedConfig[k] === findConfig[k];
        }).filter(function (v) {
          return !v;
        }).length === 0;
        if (found) {
          return {
            v: configStore.get(savedConfig)
          };
        }
      };
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _ret = _loop();
        if (_typeof(_ret) === "object") return _ret.v;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    var _iterator2 = _createForOfIteratorHelper(configStore.values()),
      _step2;
    try {
      var _loop2 = function _loop2() {
        var extendedConfig = _step2.value;
        var found = configKeys.map(function (k) {
          return extendedConfig[k] === findConfig[k];
        }).filter(function (v) {
          return !v;
        }).length === 0;
        if (found) {
          return {
            v: extendedConfig
          };
        }
      };
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _ret2 = _loop2();
        if (_typeof(_ret2) === "object") return _ret2.v;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    return null;
  };
  var findOrExtend = function findOrExtend(config) {
    return findExtended(config) || extendAndStore(config);
  };
  return function (props) {
    return findOrExtend(pickConfig(props));
  };
};