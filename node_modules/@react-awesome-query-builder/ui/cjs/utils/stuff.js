"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.truncateString = exports.shallowEqual = exports.logger = exports.immutableEqual = exports.getLogger = exports.defaultValue = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var defaultValue = function defaultValue(value, _default) {
  return typeof value === "undefined" ? _default : value;
};
exports.defaultValue = defaultValue;
var truncateString = function truncateString(str, n, useWordBoundary) {
  if (!n || str.length <= n) {
    return str;
  }
  var subString = str.substr(0, n - 1);
  return (useWordBoundary ? subString.substr(0, subString.lastIndexOf(" ")) : subString) + "...";
};
exports.truncateString = truncateString;
var immutableEqual = function immutableEqual(v1, v2) {
  if (v1 === v2) {
    return true;
  } else {
    return v1.equals(v2);
  }
};

// const deepEqual = function(v1, v2) {
//   if (v1 === v2) {
//     return true;
//   } else if (Map.isMap(v1)) {
//     return v1.equals(v2);
//   } else {
//     return JSON.stringify(v1) == JSON.stringify(v2);
//   }
// };
exports.immutableEqual = immutableEqual;
var shallowEqual = function shallowEqual(a, b) {
  var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (a === b) {
    return true;
  } else if (Array.isArray(a)) return shallowEqualArrays(a, b, deep);else if (a && typeof a.equals === "function") return a.equals(b);else if ((0, _typeof2["default"])(a) === "object") return shallowEqualObjects(a, b, deep);else return a === b;
};
exports.shallowEqual = shallowEqual;
function shallowEqualArrays(arrA, arrB) {
  var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (arrA === arrB) {
    return true;
  }
  if (!arrA || !arrB) {
    return false;
  }
  var len = arrA.length;
  if (arrB.length !== len) {
    return false;
  }
  for (var i = 0; i < len; i++) {
    var isEqual = deep ? shallowEqual(arrA[i], arrB[i], deep) : arrA[i] === arrB[i];
    if (!isEqual) {
      return false;
    }
  }
  return true;
}
function shallowEqualObjects(objA, objB) {
  var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (objA === objB) {
    return true;
  }
  if (!objA || !objB) {
    return false;
  }
  var aKeys = Object.keys(objA);
  var bKeys = Object.keys(objB);
  var len = aKeys.length;
  if (bKeys.length !== len) {
    return false;
  }
  for (var i = 0; i < len; i++) {
    var key = aKeys[i];
    var isEqual = deep ? shallowEqual(objA[key], objB[key], deep) : objA[key] === objB[key];
    if (!isEqual) {
      return false;
    }
  }
  return true;
}
var isImmutable = function isImmutable(v) {
  return (0, _typeof2["default"])(v) === "object" && v !== null && typeof v.toJS === "function";
};

// export function toImmutableList(v) {
//   return (isImmutable(v) ? v : new Immutable.List(v));
// }

var isDev = function isDev() {
  return typeof process !== "undefined" && process.env && process.env.NODE_ENV == "development";
};
var getLogger = function getLogger() {
  var devMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var verbose = devMode != undefined ? devMode : isDev();
  return verbose ? console : {
    error: function error() {},
    log: function log() {},
    warn: function warn() {},
    debug: function debug() {},
    info: function info() {}
  };
};
exports.getLogger = getLogger;
var logger = getLogger();
exports.logger = logger;