import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState } from "react";
import { Dropdown, DropdownMenu, DropdownToggle, DropdownItem } from "reactstrap";
import { Utils } from "@react-awesome-query-builder/ui";
var mapListValues = Utils.ListUtils.mapListValues;
export default (function (_ref) {
  var listValues = _ref.listValues,
    selectedValue = _ref.value,
    setValue = _ref.setValue,
    allowCustomValues = _ref.allowCustomValues,
    readonly = _ref.readonly,
    placeholder = _ref.placeholder;
  var onChange = function onChange(e) {
    if (e.target.value === undefined) return;
    setValue(e.target.value);
  };
  var renderOptions = function renderOptions() {
    return mapListValues(listValues, function (_ref2) {
      var title = _ref2.title,
        value = _ref2.value;
      return /*#__PURE__*/React.createElement(DropdownItem, {
        key: value,
        onClick: onChange,
        value: value,
        active: selectedValue == value
      }, title);
    });
  };
  var renderValue = function renderValue(selectedValue) {
    if (!readonly && selectedValue == null) return placeholder;
    return getListValueTitle(selectedValue);
  };
  var getListValueTitle = function getListValueTitle(selectedValue) {
    return mapListValues(listValues, function (_ref3) {
      var title = _ref3.title,
        value = _ref3.value;
      return value === selectedValue ? title : null;
    }).filter(function (v) {
      return v !== null;
    }).shift();
  };
  var hasValue = selectedValue != null;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isOpen = _useState2[0],
    setIsOpen = _useState2[1];
  var stylesDropdownWrapper = {
    lineHeight: "105%",
    minHeight: "1.7rem",
    paddingBottom: "0.45rem"
  };
  var stylesDropdownMenuWrapper = {
    //minWidth: "100%"
  };
  return /*#__PURE__*/React.createElement(Dropdown, {
    isOpen: isOpen,
    onClick: function onClick() {
      return !isOpen ? setIsOpen(true) : setIsOpen(false);
    },
    disabled: readonly,
    toggle: function toggle() {
      return setIsOpen(!isOpen);
    }
  }, /*#__PURE__*/React.createElement(DropdownToggle, {
    tag: "button",
    className: "form-select",
    style: stylesDropdownWrapper,
    color: "transparent"
  }, hasValue ? renderValue(selectedValue) : /*#__PURE__*/React.createElement("span", null, "\xA0")), /*#__PURE__*/React.createElement(DropdownMenu, {
    container: "body",
    style: stylesDropdownMenuWrapper
  }, !hasValue && /*#__PURE__*/React.createElement(DropdownItem, {
    disabled: true,
    value: ""
  }), renderOptions()));
});