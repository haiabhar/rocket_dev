import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState } from "react";
import { Dropdown, DropdownMenu, DropdownToggle, DropdownItem } from "reactstrap";
import { Utils } from "@react-awesome-query-builder/ui";
var mapListValues = Utils.ListUtils.mapListValues;
export default (function (_ref) {
  var listValues = _ref.listValues,
    value = _ref.value,
    setValue = _ref.setValue,
    allowCustomValues = _ref.allowCustomValues,
    placeholder = _ref.placeholder,
    readonly = _ref.readonly;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isOpen = _useState2[0],
    setIsOpen = _useState2[1];
  var _useState3 = useState(value !== null && value !== void 0 ? value : []),
    _useState4 = _slicedToArray(_useState3, 2),
    selectedValues = _useState4[0],
    setSelectedValues = _useState4[1];
  var onChange = function onChange(e) {
    var value = getMultiSelectValues(e.target.value, listValues);
    if (value.length == 0) value = undefined;
    setValue(value);
  };
  var renderOptions = function renderOptions() {
    return mapListValues(listValues, function (_ref2) {
      var title = _ref2.title,
        value = _ref2.value;
      return /*#__PURE__*/React.createElement(DropdownItem, {
        key: value,
        onClick: onChange,
        value: value,
        active: selectedValues.some(function (x) {
          return x === value;
        })
      }, title);
    });
  };
  var stylesDropdownWrapper = {
    lineHeight: "105%",
    minHeight: "1.7rem",
    paddingBottom: "0.45rem"
  };
  var stylesDropdownMenuWrapper = {
    //minWidth: "100%"
  };
  var renderValue = function renderValue(selectedValues) {
    if (!readonly && !selectedValues.length) return placeholder;
    var selectedTitles = mapListValues(listValues, function (_ref3) {
      var title = _ref3.title,
        value = _ref3.value;
      return selectedValues.indexOf(value) > -1 ? title : null;
    }).filter(function (v) {
      return v !== null;
    });
    return selectedTitles.join(", ");
  };
  var getMultiSelectValues = function getMultiSelectValues(value, options) {
    if (!value) return selectedValues;
    var isNewSelection = !selectedValues.includes(value);
    var newSelectedValues = [];
    if (isNewSelection) {
      newSelectedValues = [].concat(_toConsumableArray(selectedValues), [value]);
      setSelectedValues(newSelectedValues);
    } else {
      newSelectedValues = selectedValues.filter(function (x) {
        return x !== value;
      });
      setSelectedValues(newSelectedValues);
    }
    return newSelectedValues;
  };
  return /*#__PURE__*/React.createElement(Dropdown, {
    isOpen: isOpen,
    onClick: function onClick() {
      return !isOpen ? setIsOpen(true) : setIsOpen(false);
    },
    disabled: readonly,
    toggle: function toggle() {
      return setIsOpen(!isOpen);
    }
  }, /*#__PURE__*/React.createElement(DropdownToggle, {
    tag: "button",
    className: "form-select",
    style: stylesDropdownWrapper,
    color: "transparent"
  }, selectedValues.length ? renderValue(selectedValues) : /*#__PURE__*/React.createElement("span", null, "\xA0")), /*#__PURE__*/React.createElement(DropdownMenu, {
    container: "body",
    style: stylesDropdownMenuWrapper
  }, renderOptions()));
});