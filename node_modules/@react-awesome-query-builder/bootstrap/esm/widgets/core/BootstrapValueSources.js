import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import React, { useState } from "react";
import { Dropdown, DropdownMenu, DropdownToggle, DropdownItem } from "reactstrap";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faEllipsisV } from "@fortawesome/free-solid-svg-icons";
export default (function (_ref) {
  var config = _ref.config,
    valueSources = _ref.valueSources,
    valueSrc = _ref.valueSrc,
    title = _ref.title,
    setValueSrc = _ref.setValueSrc,
    readonly = _ref.readonly;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isOpen = _useState2[0],
    setIsOpen = _useState2[1];
  var stylesDropdownWrapper = {
    lineHeight: "105%",
    minHeight: "1.7rem",
    paddingBottom: "0.45rem"
  };
  var stylesDropdownMenuWrapper = {
    //minWidth: "100%"
  };
  var onChange = function onChange(e) {
    if (e.target.value === undefined) return;
    setValueSrc(e.target.value);
  };
  var getValueSrcLabel = function getValueSrcLabel(valueSrc) {
    var valueSrcInfo = valueSources.filter(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
        srcKey = _ref3[0],
        _info = _ref3[1];
      return srcKey == valueSrc;
    }).map(function (_ref4) {
      var _ref5 = _slicedToArray(_ref4, 2),
        _srcKey = _ref5[0],
        info = _ref5[1];
      return info;
    }).shift();
    return (valueSrcInfo === null || valueSrcInfo === void 0 ? void 0 : valueSrcInfo.label) || valueSrc;
  };
  var renderOptions = function renderOptions(valueSources) {
    return valueSources.map(function (_ref6) {
      var _ref7 = _slicedToArray(_ref6, 2),
        srcKey = _ref7[0],
        info = _ref7[1];
      return /*#__PURE__*/React.createElement(DropdownItem, {
        key: srcKey,
        onClick: onChange,
        value: srcKey,
        active: valueSrc == srcKey
      }, info.label || srcKey);
    });
  };
  return /*#__PURE__*/React.createElement(Dropdown, {
    isOpen: isOpen,
    onClick: function onClick() {
      return !isOpen ? setIsOpen(true) : setIsOpen(false);
    },
    disabled: readonly,
    toggle: function toggle() {
      return setIsOpen(!isOpen);
    }
  }, /*#__PURE__*/React.createElement(DropdownToggle, {
    tag: "span",
    className: "btn",
    style: stylesDropdownWrapper,
    color: "transparent"
  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {
    icon: faEllipsisV
  })), /*#__PURE__*/React.createElement(DropdownMenu, {
    container: "body",
    style: stylesDropdownMenuWrapper
  }, renderOptions(valueSources)));
});