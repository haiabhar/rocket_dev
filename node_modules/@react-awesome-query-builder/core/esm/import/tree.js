import _typeof from "@babel/runtime/helpers/typeof";
import Immutable, { fromJS, Map } from "immutable";
import { validateTree } from "../utils/validation";
import { extendConfig } from "../utils/configUtils";
import { getTreeBadFields, getLightTree } from "../utils/treeUtils";
import { isJsonLogic } from "../utils/stuff";
export var getTree = function getTree(immutableTree) {
  var light = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var children1AsArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  if (!immutableTree) return undefined;
  var tree = immutableTree;
  tree = tree.toJS();
  if (light) tree = getLightTree(tree, children1AsArray);
  return tree;
};
export var loadTree = function loadTree(serTree) {
  if (isImmutableTree(serTree)) {
    return serTree;
  } else if (isTree(serTree)) {
    return jsTreeToImmutable(serTree);
  } else if (typeof serTree == "string" && serTree.startsWith('["~#iM"')) {
    //tip: old versions of RAQB were saving tree with `transit.toJSON()`
    // https://github.com/ukrbublik/react-awesome-query-builder/issues/69
    throw "You are trying to load query in obsolete serialization format (Immutable string) which is not supported in versions starting from 2.1.17";
  } else if (typeof serTree == "string") {
    return jsTreeToImmutable(JSON.parse(serTree));
  } else throw "Can't load tree!";
};
export var checkTree = function checkTree(tree, config) {
  if (!tree) return undefined;
  var extendedConfig = extendConfig(config);
  return validateTree(tree, null, extendedConfig, extendedConfig);
};
export var isValidTree = function isValidTree(tree) {
  return getTreeBadFields(tree).length == 0;
};
export var isImmutableTree = function isImmutableTree(tree) {
  return Map.isMap(tree);
};
export var isTree = function isTree(tree) {
  return _typeof(tree) == "object" && (tree.type == "group" || tree.type == "switch_group");
};
export { isJsonLogic };
function jsTreeToImmutable(tree) {
  return fromJS(tree, function (key, value) {
    var outValue;
    if (key == "properties") {
      outValue = value.toOrderedMap();

      // `value` should be undefined instead of null
      // JSON doesn't support undefined and replaces undefined -> null
      // So fix: null -> undefined
      for (var i = 0; i < 2; i++) {
        var _outValue$get;
        if (((_outValue$get = outValue.get("value")) === null || _outValue$get === void 0 ? void 0 : _outValue$get.get(i)) === null) {
          outValue = outValue.setIn(["value", i], undefined);
        }
      }
    } else if (key == "value" && value.get(0) && value.get(0).toJS !== undefined) {
      var valueJs = value.get(0).toJS();
      if (valueJs.func) {
        outValue = value.toOrderedMap();
      } else {
        // only for raw values keep JS representation
        outValue = Immutable.List.of(valueJs);
      }
    } else if (key == "asyncListValues") {
      // keep in JS format
      outValue = value.toJS();
    } else if (key == "children1" && Immutable.Iterable.isIndexed(value)) {
      outValue = new Immutable.OrderedMap(value.map(function (child) {
        return [child.get("id"), child];
      }));
    } else {
      outValue = Immutable.Iterable.isIndexed(value) ? value.toList() : value.toOrderedMap();
    }
    return outValue;
  });
}