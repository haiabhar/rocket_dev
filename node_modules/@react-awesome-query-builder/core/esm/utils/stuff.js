import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _typeof from "@babel/runtime/helpers/typeof";
import Immutable, { Map } from "immutable";

// RegExp.quote = function (str) {
//     return str.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
// };

export var defaultValue = function defaultValue(value, _default) {
  return typeof value === "undefined" ? _default : value;
};

// const immutableEqual = function(v1, v2) {
//   if (v1 === v2) {
//     return true;
//   } else {
//     return v1.equals(v2);
//   }
// };

export var deepEqual = function deepEqual(v1, v2) {
  if (v1 === v2) {
    return true;
  } else if (Map.isMap(v1)) {
    return v1.equals(v2);
  } else {
    return JSON.stringify(v1) == JSON.stringify(v2);
  }
};

// //Do sets have same values?
// const eqSet = function (as, bs) {
//   if (as.size !== bs.size) return false;
//   for (var a of as) if (!bs.has(a)) return false;
//   return true;
// };

// //Do arrays have same values?
// const eqArrSet = function (arr1, arr2) {
//   return eqSet(new Set(arr1), new Set(arr2));
// };

export var shallowEqual = function shallowEqual(a, b) {
  var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (a === b) {
    return true;
  } else if (Array.isArray(a)) return shallowEqualArrays(a, b, deep);else if (Map.isMap(a)) return a.equals(b);else if (_typeof(a) == "object") return shallowEqualObjects(a, b, deep);else return a === b;
};
function shallowEqualArrays(arrA, arrB) {
  var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (arrA === arrB) {
    return true;
  }
  if (!arrA || !arrB) {
    return false;
  }
  var len = arrA.length;
  if (arrB.length !== len) {
    return false;
  }
  for (var i = 0; i < len; i++) {
    var isEqual = deep ? shallowEqual(arrA[i], arrB[i], deep) : arrA[i] === arrB[i];
    if (!isEqual) {
      return false;
    }
  }
  return true;
}
function shallowEqualObjects(objA, objB) {
  var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (objA === objB) {
    return true;
  }
  if (!objA || !objB) {
    return false;
  }
  var aKeys = Object.keys(objA);
  var bKeys = Object.keys(objB);
  var len = aKeys.length;
  if (bKeys.length !== len) {
    return false;
  }
  for (var i = 0; i < len; i++) {
    var key = aKeys[i];
    var isEqual = deep ? shallowEqual(objA[key], objB[key], deep) : objA[key] === objB[key];
    if (!isEqual) {
      return false;
    }
  }
  return true;
}
var isImmutable = function isImmutable(v) {
  return _typeof(v) === "object" && v !== null && typeof v.toJS === "function";
};
export function toImmutableList(v) {
  return isImmutable(v) ? v : new Immutable.List(v);
}
export function applyToJS(v) {
  return isImmutable(v) ? v.toJS() : v;
}
export var escapeRegExp = function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\/]/g, "\\$&"); // $& means the whole matched string
};

export var isJsonLogic = function isJsonLogic(logic) {
  return _typeof(logic) === "object" // An object
  && logic !== null // but not null
  && !Array.isArray(logic) // and not an array
  && Object.keys(logic).length === 1 // with exactly one key
  ;
};

export function sleep(delay) {
  return new Promise(function (resolve) {
    setTimeout(resolve, delay);
  });
}

// [1, 4, 9] + [1, 5, 9] => [1, 4, 5, 9]
// Used for merging arrays of operators for different widgets of 1 type
export function mergeArraysSmart(arr1, arr2) {
  if (!arr1) arr1 = [];
  if (!arr2) arr2 = [];
  return arr2.map(function (op) {
    return [op, arr1.indexOf(op)];
  }).map(function (_ref, i, orig) {
    var _ref2 = _slicedToArray(_ref, 2),
      op = _ref2[0],
      ind = _ref2[1];
    if (ind == -1) {
      var next = orig.slice(i + 1);
      var prev = orig.slice(0, i);
      var after = prev.reverse().find(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
          _cop = _ref4[0],
          ci = _ref4[1];
        return ci != -1;
      });
      var before = next.find(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
          _cop = _ref6[0],
          ci = _ref6[1];
        return ci != -1;
      });
      if (before) return [op, "before", before[0]];else if (after) return [op, "after", after[0]];else return [op, "append", null];
    } else {
      // already exists
      return null;
    }
  }).filter(function (x) {
    return x !== null;
  }).reduce(function (acc, _ref7) {
    var _ref8 = _slicedToArray(_ref7, 3),
      newOp = _ref8[0],
      rel = _ref8[1],
      relOp = _ref8[2];
    var ind = acc.indexOf(relOp);
    if (acc.indexOf(newOp) == -1) {
      if (ind > -1) {
        // insert after or before
        acc.splice(ind + (rel == "after" ? 1 : 0), 0, newOp);
      } else {
        // insert to end or start
        acc.splice(rel == "append" ? Infinity : 0, 0, newOp);
      }
    }
    return acc;
  }, arr1.slice());
}
var isDev = function isDev() {
  return typeof process !== "undefined" && process.env && process.env.NODE_ENV == "development";
};
export var getLogger = function getLogger() {
  var devMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var verbose = devMode != undefined ? devMode : isDev();
  return verbose ? console : {
    error: function error() {},
    log: function log() {},
    warn: function warn() {},
    debug: function debug() {},
    info: function info() {}
  };
};
export var getFirstDefined = function getFirstDefined() {
  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var ret;
  for (var i = 0; i < arr.length; i++) {
    var v = arr[i];
    if (v !== undefined) {
      ret = v;
      break;
    }
  }
  return ret;
};
export var logger = getLogger();